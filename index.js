require('dotenv').config();
const express = require('express');
const fs = require('fs');
const path = require('path');
const http = require('http');
const socketIo = require('socket.io');
const axios = require('axios');
const chalk = require('chalk');

const app = express();
app.use(express.static(path.join(__dirname, 'public')));
const server = http.createServer(app);
const io = socketIo(server);

// ‚úÖ Middleware ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JSON ‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

let latestData = { temperature: 0, humidity: 0, time: new Date() };

const { log, banner } = require('./logger');

banner(); // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏™‡∏ß‡∏¢ ‡πÜ

log('‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...', 'info');
log('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');



// ‡πÇ‡∏´‡∏•‡∏î config.json ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô


const loadConfig =  () => {
  try {
    const rawConfig = fs.readFileSync('config.json');
    const config = JSON.parse(rawConfig);
    log('‡πÇ‡∏´‡∏•‡∏î config.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
    return config
  } catch (e) {
    log('‡πÑ‡∏°‡πà‡∏û‡∏ö config.json ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ, ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', 'warn');
  }
}

// API: ‡∏î‡∏∂‡∏á config
app.get('/api/config', (req, res) => {
  log('API /api/config ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å', 'info');
  const config = loadConfig();
  res.json(config);
});

// API: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config
app.post('/api/config', (req, res) => {
  config = req.body;
  try {
    fs.writeFileSync('config.json', JSON.stringify(config, null, 2));
    log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
    res.sendStatus(200);
  } catch (e) {
    log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config.json ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + e.message, 'error');
    res.status(500).json({ error: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
});

app.get('/api/data', (req, res) => {
  try {
    const rawData = fs.readFileSync('data.json');
    const data = JSON.parse(rawData);
    res.json(data); // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
  } catch (err) {
    console.error('‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err.message);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ' });
  }
});

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö config
// let config = {
//   temperatureThreshold: null,
//   humidityThreshold: null,
//   smoke: null,
//   notify: {
//     discord: true,
//     telegram: true,
//     line: true
//   }
// };
let lastAlertTime = 0;
const ALERT_COOLDOWN = 60 * 1000; // 1 minute

app.post('/data', async (req, res) => {
  const { temperature, humidity, smoke } = req.body;

  if (
    typeof temperature !== 'number' ||
    typeof humidity !== 'number' ||
    typeof smoke !== 'number'
  ) {
    log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
    return res.status(400).json({ error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }

  latestData = { temperature, humidity, smoke, time: new Date() };
  io.emit('sensorData', latestData);
  log(`‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Temperature: ${temperature}¬∞C, Humidity: ${humidity}%, Smoke: ${smoke}`, 'info');

  const config = loadConfig();

  const isHumidityAlert = humidity > config.humidityThreshold;
  const isTemperatureAlert = temperature > config.temperatureThreshold;
  const isSmokeAlert = smoke > config.smokeThreshold;

  const now = Date.now();

  if ((isHumidityAlert || isTemperatureAlert || isSmokeAlert) && (now - lastAlertTime >= ALERT_COOLDOWN)) {
    lastAlertTime = now;
    const discordPayload = formatAlertEmbed(humidity, temperature, smoke, config);

    try {
      if (config.notify.discord) {
        await sendDiscord(discordPayload);
        log('‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
      }

      if (config.notify.telegram) {
        let text = `‚ö†Ô∏è *‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î:*\n`;
        if (isHumidityAlert)
          text += `üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity}% (‡πÄ‡∏Å‡∏¥‡∏ô ${config.humidityThreshold}%)\n`;
        if (isTemperatureAlert)
          text += `üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temperature}¬∞C (‡πÄ‡∏Å‡∏¥‡∏ô ${config.temperatureThreshold}¬∞C)\n`;
        if (isSmokeAlert)
          text += `üî• ‡∏Ñ‡∏ß‡∏±‡∏ô: ${smoke} (‡πÄ‡∏Å‡∏¥‡∏ô ${config.smokeThreshold})\n`;
        text += `\nüïí ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString()}`;
        await sendTelegram(text);
        log('‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
      }

      if (config.notify.line) {
        let msg = `‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:\n`;
        if (isHumidityAlert)
          msg += `üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity}% (‡πÄ‡∏Å‡∏¥‡∏ô ${config.humidityThreshold}%)\n`;
        if (isTemperatureAlert)
          msg += `üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temperature}¬∞C (‡πÄ‡∏Å‡∏¥‡∏ô ${config.temperatureThreshold}¬∞C)\n`;
        if (isSmokeAlert)
          msg += `üî• ‡∏Ñ‡∏ß‡∏±‡∏ô: ${smoke} (‡πÄ‡∏Å‡∏¥‡∏ô ${config.smokeThreshold})\n`;
        msg += `üïí ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString()}`;
        await sendLineNotify(msg);
        log('‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE Notify ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
      }
    } catch (error) {
      log(`‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 'error');
    }
  } else if (isHumidityAlert || isTemperatureAlert || isSmokeAlert) {
    log('‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤', 'warn');
  }

  fs.writeFileSync('data.json', JSON.stringify(latestData, null, 2), "utf8", err => {
    if (err) {
      log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + err.message, 'error');
      return res.status(500).json({ error: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
    }
    log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
  });

  res.sendStatus(200);
});

function formatAlertEmbed(humidity, temperature, smoke, config) {
  const fields = [];

  if (humidity > config.humidityThreshold) {
    fields.push({
      name: "üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô",
      value: `${humidity}% (‡πÄ‡∏Å‡∏¥‡∏ô ${config.humidityThreshold}%)`,
      inline: true
    });
  }

  if (temperature > config.temperatureThreshold) {
    fields.push({
      name: "üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥",
      value: `${temperature}¬∞C (‡πÄ‡∏Å‡∏¥‡∏ô ${config.temperatureThreshold}¬∞C)` ,
      inline: true
    });
  }

  if (smoke > config.smokeThreshold) {
    fields.push({
      name: "üî• ‡∏Ñ‡∏ß‡∏±‡∏ô",
      value: `${smoke} (‡πÄ‡∏Å‡∏¥‡∏ô ${config.smokeThreshold})`,
      inline: true
    });
  }

  return {
    content: "@everyone",
    embeds: [{
      title: "‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
      description: "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≤‡∏Å ESP32",
      color: 0xff0000,
      fields: fields,
      footer: {
        text: `‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: ${new Date().toLocaleString()}`
      }
    }]
  };
}

// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord
async function sendDiscord(payload) {
  if (!process.env.DISCORD_WEBHOOK_URL) return;
  try {
    await axios.post(process.env.DISCORD_WEBHOOK_URL, payload, {
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    throw new Error('‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
  }
}
// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord
async function sendDiscord(payload) {
  if (!process.env.DISCORD_WEBHOOK_URL) return;
  try {
    await axios.post(process.env.DISCORD_WEBHOOK_URL, payload, {
      headers: { 'Content-Type': 'application/json' }
    });
  } catch (error) {
    throw new Error('‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
  }
}
async function sendTelegram(message) {
  const botToken = process.env.TELEGRAM_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  if (!botToken || !chatId) {
    log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ TELEGRAM_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ TELEGRAM_CHAT_ID', 'error');
    return;
  }
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  try {
    await axios.post(url, {
      chat_id: chatId,
      text: message,
    });
  } catch (error) {
    log('‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
    if (error.response && error.response.data) {
      log('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å Telegram: ' + JSON.stringify(error.response.data), 'error');
    }
  }
}

async function sendLineNotify(message) {
  const lineToken = process.env.LINE_NOTIFY_TOKEN;
  const lineApi = process.env.LINE_NOTIFY_API || 'https://notify-api.line.me/api/notify';
  if (!lineToken) {
    log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ LINE_NOTIFY_TOKEN', 'error');
    return;
  }
  try {
    await axios.post(
      lineApi,
      new URLSearchParams({ message }),
      { headers: { Authorization: `Bearer ${lineToken}` } }
    );
  } catch (error) {
    log('‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE Notify ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
    if (error.response && error.response.data) {
      log('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å LINE: ' + JSON.stringify(error.response.data), 'error');
    }
  }
}
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  log(`‚úÖ Server ‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà http://localhost:${PORT}`, 'success');
});
